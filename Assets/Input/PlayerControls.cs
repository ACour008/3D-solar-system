//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""70c1368a-fa70-4191-b844-4af5f7b0630f"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""PassThrough"",
                    ""id"": ""51988dff-945e-429f-9bf9-adddc9a6704b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""PassThrough"",
                    ""id"": ""97ce58e8-cd9f-4610-a3ce-85ca92dcdeed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""65488c8c-c4fb-468f-b8f2-de9a2b0f7f3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ba13357b-a67f-43f3-95df-36a033a857e6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0c133b84-0416-49eb-8456-99ca5a462dc2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PitchYawMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f33d2afb-58ec-4e52-9900-61350b84a056"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard 1D Axis"",
                    ""id"": ""a498afa6-2128-45d3-99ae-ba540c8df048"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e06cab12-0300-4c53-9f27-382a854b3dd4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""403c4ea4-48d9-4c08-9b6e-d65050cdacbc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GamePad 1D Axis"",
                    ""id"": ""9564b813-8903-4a14-9f5b-f5be0d56cb01"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a5df5d7b-4a77-4ff0-8785-69b6bf446a00"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""606fd037-cc92-497b-9c72-89b836b3a9c9"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e158eb8a-cdec-4de8-b6dd-487fa0bbd968"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""114890f7-209b-4338-be9d-73de8af917b7"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce942e7f-a7b4-430e-859f-79303a6d90bd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eba23c7-dd7c-4d76-a276-a67e8e404db6"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""GamePad 1D Axis"",
                    ""id"": ""f835f366-efc8-4fb7-9fd7-c7740fa47e04"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d575da20-5a74-4da8-bc1f-70a2163c7479"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8dce3742-7f33-44e3-ae3d-f2602a8ae2c3"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GamePad 1D Axis"",
                    ""id"": ""2c9b807d-3d23-46f6-aab7-92d40c58d6f7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d91615bb-e91a-4886-94d2-344155b439f2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0888e7a3-3324-4716-b55e-ce03beaa1d44"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e824f54-f1a4-4f18-8e47-dc929311568e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchYawMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Systems"",
            ""id"": ""82f681b6-f879-4733-a4cc-d3f73de4100e"",
            ""actions"": [
                {
                    ""name"": ""EngageNav"",
                    ""type"": ""Button"",
                    ""id"": ""43688f86-897c-4c86-83fb-e07452c8f998"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54ab7687-b1ee-4902-94e6-f5616f9fda18"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EngageNav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""933f9098-535d-49c0-b24d-35baccf6b263"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EngageNav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Thrust = m_Movement.FindAction("Thrust", throwIfNotFound: true);
        m_Movement_Brake = m_Movement.FindAction("Brake", throwIfNotFound: true);
        m_Movement_Roll = m_Movement.FindAction("Roll", throwIfNotFound: true);
        m_Movement_Pitch = m_Movement.FindAction("Pitch", throwIfNotFound: true);
        m_Movement_Yaw = m_Movement.FindAction("Yaw", throwIfNotFound: true);
        m_Movement_PitchYawMouse = m_Movement.FindAction("PitchYawMouse", throwIfNotFound: true);
        // Systems
        m_Systems = asset.FindActionMap("Systems", throwIfNotFound: true);
        m_Systems_EngageNav = m_Systems.FindAction("EngageNav", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Thrust;
    private readonly InputAction m_Movement_Brake;
    private readonly InputAction m_Movement_Roll;
    private readonly InputAction m_Movement_Pitch;
    private readonly InputAction m_Movement_Yaw;
    private readonly InputAction m_Movement_PitchYawMouse;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Thrust => m_Wrapper.m_Movement_Thrust;
        public InputAction @Brake => m_Wrapper.m_Movement_Brake;
        public InputAction @Roll => m_Wrapper.m_Movement_Roll;
        public InputAction @Pitch => m_Wrapper.m_Movement_Pitch;
        public InputAction @Yaw => m_Wrapper.m_Movement_Yaw;
        public InputAction @PitchYawMouse => m_Wrapper.m_Movement_PitchYawMouse;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Thrust.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrust;
                @Brake.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnBrake;
                @Roll.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitch;
                @Yaw.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnYaw;
                @PitchYawMouse.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitchYawMouse;
                @PitchYawMouse.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitchYawMouse;
                @PitchYawMouse.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitchYawMouse;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @PitchYawMouse.started += instance.OnPitchYawMouse;
                @PitchYawMouse.performed += instance.OnPitchYawMouse;
                @PitchYawMouse.canceled += instance.OnPitchYawMouse;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Systems
    private readonly InputActionMap m_Systems;
    private ISystemsActions m_SystemsActionsCallbackInterface;
    private readonly InputAction m_Systems_EngageNav;
    public struct SystemsActions
    {
        private @PlayerControls m_Wrapper;
        public SystemsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EngageNav => m_Wrapper.m_Systems_EngageNav;
        public InputActionMap Get() { return m_Wrapper.m_Systems; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SystemsActions set) { return set.Get(); }
        public void SetCallbacks(ISystemsActions instance)
        {
            if (m_Wrapper.m_SystemsActionsCallbackInterface != null)
            {
                @EngageNav.started -= m_Wrapper.m_SystemsActionsCallbackInterface.OnEngageNav;
                @EngageNav.performed -= m_Wrapper.m_SystemsActionsCallbackInterface.OnEngageNav;
                @EngageNav.canceled -= m_Wrapper.m_SystemsActionsCallbackInterface.OnEngageNav;
            }
            m_Wrapper.m_SystemsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EngageNav.started += instance.OnEngageNav;
                @EngageNav.performed += instance.OnEngageNav;
                @EngageNav.canceled += instance.OnEngageNav;
            }
        }
    }
    public SystemsActions @Systems => new SystemsActions(this);
    public interface IMovementActions
    {
        void OnThrust(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnPitchYawMouse(InputAction.CallbackContext context);
    }
    public interface ISystemsActions
    {
        void OnEngageNav(InputAction.CallbackContext context);
    }
}
